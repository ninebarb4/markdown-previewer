{"version":3,"sources":["Editor.js","Previewer.js","App.js","reportWebVitals.js","index.js"],"names":["require","Editor","props","textAreaRef","useRef","useEffect","current","style","height","scrollHeight","text","className","ref","id","value","paddingTop","paddingBottom","paddingLeft","onChange","element","setText","target","marked","Previewer","dangerouslySetInnerHTML","__html","setOptions","breaks","highlight","code","Prism","languages","javascript","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAKeA,EAAQ,GAER,SAASC,EAAOC,GAE3B,IAEMC,EAAcC,mBAmBpB,OAVDC,qBAAU,WAGLF,EAAYG,QAAQC,MAAMC,OAdR,OAelB,IAAMC,EAAeN,EAAYG,QAAQG,aACzCN,EAAYG,QAAQC,MAAMC,OAASC,EAAe,OACnD,CAACP,EAAMQ,OAKN,qBAAKC,UAAU,iBAAf,SACI,0BACAC,IAAKT,EACLQ,UAAU,aACVE,GAAG,SACHC,MAAOZ,EAAMQ,KACbH,MAAO,CAACQ,WAAY,MAAOC,cAAe,MAAOC,YAAa,OAC9DC,SAzBR,SAAsBC,GAElBjB,EAAMkB,QAAQD,EAAQE,OAAOP,Y,oBCV/BQ,G,MAAStB,EAAQ,IASR,SAASuB,EAAUrB,GAC9B,OACI,qBAAKS,UAAU,iBAAf,SACI,qBAEAA,UAAU,eACVa,wBAAyB,CAACC,OAAQH,EAAOpB,EAAMQ,OAC/CG,GAAG,UACHN,MAAO,CAACQ,WAAY,MAAOC,cAAe,MAAOC,YAAa,WAf1EK,EAAOI,WAAW,CACdC,QAAQ,EACRC,UAAW,SAAUC,GACjB,OAAOC,IAAMF,UAAUC,EAAMC,IAAMC,UAAUC,WAAY,iB,oBCyClDC,MAXf,WACE,MAAwBC,mBAnCR,qrBAmChB,mBAAOxB,EAAP,KAAaU,EAAb,KACA,OACE,sBAAKT,UAAU,eAAf,UACE,cAAC,IAAD,IACA,cAACV,EAAD,CAAQS,KAAMA,EAAMU,QAASA,IAC7B,cAACG,EAAD,CAAWb,KAAMA,EAAMU,QAASA,QClCvBe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.dbba8a6a.chunk.js","sourcesContent":["import React from 'react';\nimport './TextAreas.css';\nimport { useState, useEffect, useRef } from 'react';\n\n//assign marked library to variable\nconst marked = require(\"marked\");\n\nexport default function Editor(props) {\n    //give a default height to editor text area\n    const defaultHeight = \"40px\";\n    //useRef hook used to grab text area element\n    const textAreaRef = useRef();\n    \n    function handleChange(element){\n        //set \"text\" held in parent state\n        props.setText(element.target.value);\n        \n    }\n\n    //when text updated on change use effect will alter scrollHeight of element\n   useEffect(() => {\n       //first set height back to default height incase user deletes content\n       //if they did this scroll height would remain the same but would have large empty text area\n        textAreaRef.current.style.height = defaultHeight;\n        const scrollHeight = textAreaRef.current.scrollHeight;\n        textAreaRef.current.style.height = scrollHeight + \"px\";\n    }, [props.text])\n\n   \n\n    return (\n        <div className=\"text-container\">\n            <textarea \n            ref={textAreaRef}\n            className=\"text-areas\" \n            id=\"editor\" \n            value={props.text}\n            style={{paddingTop: \"0px\", paddingBottom: \"0px\", paddingLeft: \"1em\"}} \n            onChange={handleChange}\n            >\n\n            </textarea>\n            \n        </div>\n    )\n}\n","import React from 'react';\nimport './TextAreas.css';\nimport Prism from 'prismjs';\nimport 'prismjs/themes/prism.css';\n\nconst marked = require(\"marked\");\n\nmarked.setOptions({\n    breaks: true,\n    highlight: function (code) {\n        return Prism.highlight(code, Prism.languages.javascript, 'javascript')\n    }\n});\n\nexport default function Previewer(props) {\n    return (\n        <div className=\"text-container\">\n            <div\n            //ref={outputTextArea}\n            className=\"preview-area\" \n            dangerouslySetInnerHTML={{__html: marked(props.text)}}\n            id=\"preview\" \n            style={{paddingTop: \"0px\", paddingBottom: \"0px\", paddingLeft: \"1em\"}} \n            >\n            </div>\n        </div>\n    )\n}","import './App.css';\nimport Editor from './Editor';\nimport Previewer from './Previewer';\nimport { useState } from 'react';\nimport ReactFCCtest from 'react-fcctest';\n\nconst initialState = `\n# Welcome to my markdown previewer\n## Enter your markdown in the top window and see it converted underneath!\n\nHave a look at the markdown [cheatsheet](https://www.markdownguide.org/cheat-sheet/) if you forget what's what!\n\nHere's some inline code, \\`const num = 7 \\` ...handy eh?\n\n\\`\\`\\`\n//This is fenced code block: \n\nfunction greet(str) {\n  return \"Hello\" + str;\n}\n\\`\\`\\`\n\nwow look! Some **bold text!** ... and again... **boom**\n\nHere is a list:\n1. First item\n2. Second item\n3. Third item\n    - Indented item\n    - Indented item\n4. Fourth item\n\n> This is a blockquote\n\nFinally an image:\n\n![white pencil](https://i.postimg.cc/j5HG5yWC/white-pencil-unsplash.jpg)\n`;\n\n\nfunction App() {\n  const [text, setText] = useState(initialState);\n  return (\n    <div className=\"page-wrapper\">\n      <ReactFCCtest />\n      <Editor text={text} setText={setText}/>\n      <Previewer text={text} setText={setText} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}